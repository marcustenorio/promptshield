# =============================
# Bibliotecas de manipulação de dados
# =============================

# Pandas: leitura/escrita de CSV, manipulação tabular (dataset_v0.1)
pandas

# NumPy: operações numéricas, arrays vetorizados (base dos embeddings)
numpy

# =============================
# Machine Learning (modelos clássicos)
# =============================

# Scikit-learn: modelos baseline (LogReg, SVM, XGBoost), métricas de avaliação
scikit-learn

# =============================
# Deep Learning / NLP (embeddings e transformers)
# =============================

# PyTorch: backend de deep learning necessário para transformers e SBERT
torch

# Sentence-Transformers: geração de embeddings semânticos (SBERT/BERT)
sentence-transformers

# Transformers (Hugging Face): uso de modelos pré-treinados (BERT, RoBERTa, DistilBERT)
transformers

# =============================
# Web framework para expor o firewall como API
# =============================

# FastAPI: framework web leve para criar o firewall semântico como serviço REST
fastapi

# Uvicorn: servidor ASGI rápido para rodar a API FastAPI
uvicorn[standard]

# =============================
# Utilitários adicionais
# =============================

# Langdetect: detectar idioma do prompt (pt/en), útil no dataset e pré-processamento
langdetect

# Python-dotenv: carregar variáveis de ambiente (.env) como chaves de API, configs
python-dotenv

# Comentário: APIs web e ASGI
fastapi>=0.111
uvicorn[standard]>=0.30

# Comentário: ML
scikit-learn>=1.4
sentence-transformers>=3.0
joblib>=1.3
numpy>=1.26
pandas>=2.0

# Comentário: utilidades
pyyaml>=6.0
orjson>=3.10

# Comentário: OpenAI SDK (Responses API)
openai>=1.40

# Comentário: logging estruturado
python-json-logger>=2.0

# LLMs alternativos
transformers>=4.42
torch>=2.2          # CPU funciona; GPU se disponível
safetensors>=0.4
accelerate>=0.30    # opcional, mas ajuda no device_map

# Cliente Ollama (opcional)
ollama>=0.3.0

google-genai>=0.3
